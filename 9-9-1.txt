
#include <iostream>
#include <vector>

using namespace std;
static int Max_Num(const vector<int>& buf)
{
	if (buf.empty())
		return 0;
	int max_s = buf[0];
	int sum = 0;
	for (size_t i = 0; i < buf.size(); ++i)
	{
		sum += buf[i];
		if (sum > max_s)
			max_s = sum;
		if (sum < buf[i] || sum < 0)
			sum = buf[i];
	}

	return max_s;
}


static int f(int x)
{
	int ret = 0;
	while (x)
	{
		ret += x % 10;
		x /= 10;
	}
	return ret;
}

static int g(int x)
{
	int ret = 0;
	while (x)
	{
		ret += x % 1;
		x = x>>1;
	} 
	return ret;
}

static int HappyNum(int n)
{
	int count = 0;
	for (int i = 0; i <= n; ++i)
	{
		if (f(i) == g(i))
			++count;
	}

	return count;
}

static bool IsNum(const vector<int>& buf)
{
	if (buf.empty())
		return true;
	bool a = false, b = false, c = false;
	for (size_t i = 1; i < buf.size(); ++i)
	{
		if (buf[i] > buf[i - 1] && !b && !c)
			a = true;
		else if (buf[i] == buf[i - 1] && !c)
			b = true;
		else if (buf[i] < buf[i - 1] && b)
			c = true;
		else
			return false;
	}
	if (!b)
		return false;
	return true;
}

int fun(int x)
{
	int ret = 0;
	while (x)
	{
		++ret;
		x = x& (x - 1);
	}

	return ret;
}

int main()
{
	vector<int> buf1{ 1, 2, 3, -4, -5, -5, 5, 5 };
	
	cout << Max_Num(buf1) << endl;
	return 0;
}